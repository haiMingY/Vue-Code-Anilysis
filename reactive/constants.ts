// using literal strings instead of numbers so that it's easier to inspect
// debugger events

/**

TrackOpTypes 是一个枚举类型，它定义了在 Vue 3 的响应式系统中追踪数据访问和操作的不同类型。
这些操作类型用于标记和追踪当读取或访问响应式对象的属性时发生的行为，以便 Vue 能够正确地追踪依赖关系并优化性能。
 */
export enum TrackOpTypes {

  // 当访问或读取响应式对象的属性时，用于追踪 getter 操作。
  // 这意味着当你读取一个响应式对象的属性时，Vue 会追踪这个操作，以便知道哪些计算属性或侦听器依赖于这个属性的值。
  // 这样，如果将来这个属性的值发生变化，Vue 可以准确地知道哪些部分需要重新计算和更新。
  GET = 'get',

  // 在检查响应式对象是否包含特定键时，用于追踪 has 操作。例如 obj.hasOwnProperty(key) 或 key in obj等
  HAS = 'has',

  // 在遍历响应式集合（如数组、Map、Set）时，用于追踪迭代操作。
  // 这包括使用 for...of 循环、forEach 方法或其他迭代方法访问集合元素
  ITERATE = 'iterate',
}
/**
 TriggerOpTypes 枚举定义了需要触发副作用的操作类型。
 在 Vue 的响应式系统中，当数据发生变化时， 需要有一种方式来通知所有依赖于这些数据的变化的部分，
 以便它们可以相应地更新或重新计算。TriggerOpTypes 提供了这种通知机制所需的操作类型。
 */
export enum TriggerOpTypes {
  /*
  * 表示设置响应式对象属性值的操作。当响应式对象的某个属性被赋值时，会触发此操作。
  * 这会进一步触发 setter 函数，通知所有依赖于该属性变化的计算属性和侦听器，以便它们可以重新计算和/或更新
  **/
  SET = 'set',

  /* 
  *在响应式集合（如数组、Map、Set 等）中添加新元素的操作。当向这些集合类型添加新元素时，会触发 ADD 操作。
  * 这允许 Vue 跟踪集合的变化，并相应地更新依赖于这些集合的计算属性和侦听器。
  */
  ADD = 'add',

  // 从响应式集合中删除元素的操作。当集合中的元素被移除时，会触发 DELETE 操作。
  // 这告诉 Vue 集合已发生变化，需要更新依赖于该集合的计算属性和侦听器
  DELETE = 'delete',

  // 清空整个响应式集合的操作。当集合被清空时（例如，数组被设置为空数组，或 Map/Set 被清空），会触发 CLEAR 操作。
  // 这会导致所有依赖于该集合的计算属性和侦听器被重新计算和/或更新。
  CLEAR = 'clear',
}
/**
ReactiveFlags 枚举定义了一系列内部使用的标志，这些标志用于标记和追踪响应式对象的状态。
这些标志通常作为对象的隐藏属性存在，以便 Vue 内部能够识别并相应地处理这些对象
 */
export enum ReactiveFlags {
  // 用于标记一个对象是否应该跳过响应式处理。在某些情况下，Vue 可能需要处理一个对象，但又不希望将其转换为响应式对象
  SKIP = '__v_skip',

  // 表示一个对象是否是响应式对象。
  IS_REACTIVE = '__v_isReactive',

  IS_READONLY = '__v_isReadonly',// 表示一个对象是否是只读响应式对象

  //表示一个对象是否是浅层响应式对象。当使用 shallow* 函数创建对象时，这个标志会被设置。浅层响应式对象只有其顶层属性是响应式的，嵌套的对象则保持原样，不会被递归地转换为响应式对象
  IS_SHALLOW = '__v_isShallow',

  RAW = '__v_raw', //存储原始非代理的对象引用，以便在需要时直接访问原始数据，而不是通过代理对象。。
}

/*
 * DirtyLevels 枚举用于内部追踪对象的脏状态（dirty state）。这种脏检查机制是 Vue 用来确定何时重新计算和更新视图的关键部分。
 * 当你修改一个响应式对象时，Vue 需要知道这个变化，并据此决定是否要重新渲染组件。
 **/
export enum DirtyLevels {
  // 表示对象目前没有被修改过，即它的状态是“干净”的。
  NotDirty = 0,

  // 当 Vue 需要检查一个对象是否可能变脏时，会设置这个状态。这通常发生在 Vue 评估计算属性或侦听器依赖项时，需要确定是否重新执行这些函数
  QueryingDirty = 1,

  // 当 Vue 需要检查一个对象是否可能变脏时，会设置这个状态。这通常发生在 Vue 评估计算属性或侦听器依赖项时，需要确定是否重新执行这些函数
  MaybeDirty_ComputedSideEffect = 2,

  // 表示对象可能发生了某种不确定的变化，但还没有足够的信息来确定这种变化是否真正影响了视图。这通常是一个中间状态，用于在进一步调查之前暂时标记对象。
  MaybeDirty = 3,

  // 对象已被确认变脏了，意味着它的状态已经发生了变化，并且这些变化需要被处理以更新视图。一旦对象被标记为 Dirty，Vue 就会触发相关的副作用函数（如计算属性或侦听器），并更新视图
  Dirty = 4,
}
